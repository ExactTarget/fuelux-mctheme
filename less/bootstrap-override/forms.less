//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
	padding: 0;
	margin: 0;
	border: 0;
	// Chrome and Firefox set a `min-width: min-content;` on fieldsets,
	// so we reset that to ensure it behaves more like a standard block element.
	// See https://github.com/twbs/bootstrap/issues/12359.
	min-width: 0;
}

//not used in bootstrap-css.html
legend {
	display: block;
	width: 100%;
	padding: 0;
	margin-bottom: @line-height-computed;
	font-size: (@font-size-base * 1.5);
	line-height: inherit;
	color: @legend-color;
	border: 0;
	border-bottom: 1px solid @legend-border-color;
}

label {
	display: inline-block;
	max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
	margin-bottom: 5px;
	font-weight: bold;
}

// Remove ms-clear from all inputs. 
input {
	&::-ms-clear {
		display:none;
	}
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
//  .box-sizing(border-box);
}

// Set the height of file controls to match text inputs
input[type="file"] {
	display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
	display: block;
	width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
	height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
	.tab-focus();
}

// Adjust output element
output {
	display: block;
	padding-top: (@padding-base-vertical - 1); // or +1. not seen in bootstrap-css.html
	font-size: @font-size-base;
	line-height: @line-height-base;
	color: @input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
	display: block;
	width: 100%;
	height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	padding: @padding-base-vertical @padding-base-horizontal;
	font-size: @font-size-base;
	line-height: @line-height-base;
	color: @input-color;
	background-color: @input-bg;
	background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	border: 1px solid @input-border;
	border-radius: @input-border-radius;
	.box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
	.transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

	// Customize the `:focus` state to imitate native WebKit styles.
	.form-control-focus();

	// Specially to show the focus state
	&.form-on-focus{
		@color-rgba: rgba(red(@input-border-focus), green(@input-border-focus), blue(@input-border-focus), .6);
		border-color: @input-border-focus;
		outline: 0;
		.box-shadow(~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}");
	}

	// Placeholder
	.placeholder();

	// Select box gradient background
	&.select-bg{
		background: -moz-linear-gradient(#FEFEFE,#E0E0E0);
		background: -webkit-linear-gradient(#FEFEFE,#E0E0E0);
		background: -o-linear-gradient(#FEFEFE,#E0E0E0);
		background: linear-gradient(#FEFEFE,#E0E0E0);
		border: 1px solid #bbb;
		.box-shadow(0 1px 1px rgba(0,0,0,.05));
	}


	// Disabled and read-only inputs
	//
	// HTML5 says that controls under a fieldset > legend:first-child won't be
	// disabled if the fieldset is disabled. Due to implementation difficulty, we
	// don't honor that edge case; we style them as disabled anyway.
	&[disabled],
	&[readonly],
	fieldset[disabled] &,
	&[disabled] .select-bg {
		cursor: not-allowed;
		background-color: @input-bg-disabled;
		opacity: 1; // iOS fix for unreadable disabled content
		color: @gray33;
	}

	// Reset height for `textarea`s
	textarea& {
		height: auto;
	}
}


//Add-ons
.input-group-addon {
	padding: 1px 5px;
	font-size: 11px; //11pt;
	font-weight: normal;
	line-height: 1;
	color: @gray33;
	text-align: center;
	background-color: @gray93;
	border: 1px solid #ccc;
	border-radius: 4px;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
	-webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned.
// As a workaround, we set a pixel line-height that matches the
// given height of the input. Since this fucks up everything else, we have to
// appropriately reset it for Internet Explorer and the size variations.

input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
	line-height: @input-height-base;
	// IE8+ misaligns the text within date inputs, so we reset
	line-height: @line-height-base ~"\0";

	&.input-sm {
		line-height: @input-height-small;
	}
	&.input-lg {
		line-height: @input-height-large;
	}
	&.input-md {
		line-height: @input-height-medium;
	}
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
	margin-bottom: 15px;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
	margin: 4px 0 0;
	margin-top: 1px \9; // IE8-9
	line-height: normal;
	top: -2px;
}

.radio,
.checkbox {
	position: relative;
	display: block;
	min-height: @line-height-computed; // clear the floating input if there is no label text
	margin-top: 10px;
	margin-bottom: 10px;

	label {
		padding-left: 20px;
		margin-bottom: 0;
		font-weight: normal;
		cursor: pointer;
	}
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
	position: absolute;
	margin-left: -20px;
	margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
	margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
	display: inline-block;
	padding-left: 20px;
	margin-bottom: 0;
	vertical-align: middle;
	font-weight: normal;
	cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
	margin-top: 0;
	margin-left: 10px; // space out consecutive inline controls
}

.checkbox-inline {
	input[type="checkbox"] {
		position: static;
		margin-right: 5px;
	}
}

.radio-inline {
	input[type="radio"] {
		position: static;
		margin-right: 5px;
	}
}


// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
	&[disabled],
	&.disabled,
	fieldset[disabled] & {
		cursor: not-allowed;
	}
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
	&.disabled,
	fieldset[disabled] & {
		cursor: not-allowed;
	}
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
	&.disabled,
	fieldset[disabled] & {
		label {
			cursor: not-allowed;
		}
	}
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
	// Size it appropriately next to real form controls
	padding-top: (@padding-base-vertical - 1);
	padding-bottom: (@padding-base-vertical + 1);
	// Remove default margin from `p`
	margin-bottom: 0;

	&.input-lg,
	&.input-sm,
	&.input-md {
		padding-left: 0;
		padding-right: 0;
	}
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

.input-sm {
	.input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small);
}

.input-lg {
	.input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; 16px; @line-height-large; @border-radius-large);
}

.input-md {
	.input-size(@input-height-medium; @padding-medium-vertical; @padding-medium-horizontal; 13px; @line-height-medium; @border-radius-medium);
}

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
	// Enable absolute positioning
	position: relative;

	// Ensure icons don't overlap text
	.form-control {
		padding-right: (@input-height-base * 1.25);
	}
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
	position: absolute;
	top: 19.5px; //25.5px;//to make icon in the center when screen width < 768px//(@line-height-computed + 5);//cannot be applied here // Height of the `label` and its margin
	right: 0;
	z-index: 2; // Ensure icon is above input groups
	display: block;
	width: @input-height-base;
	height: @input-height-base;
	line-height: @input-height-base;
	text-align: center;
}
.input-lg + .form-control-feedback {
	width: @input-height-large;
	height: @input-height-large;
	line-height: @input-height-large;
}
.input-sm + .form-control-feedback {
	width: @input-height-small;
	height: @input-height-small;
	line-height: @input-height-small;
}
.input-md + .form-control-feedback {
	width: @input-height-medium;
	height: @input-height-medium;
	line-height: @input-height-medium;
}

// Feedback states
.has-success {
	.form-control-validation(@state-success-text; @state-success-text; @state-success-bg);
}
.has-warning {
	.form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
}
.has-error {
	.form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);
}
.has-incomplete {

	.has-error-label{
		margin-right: 87px; //114px;//leave space for the label on the right
		position: relative;
	}

	.form-control{
		.placeholder(@state-danger-text);
		background-color: @gray93;
		display: inline;
		position: absolute;
	}

	//label on the right
	//
	//* Styleguide doesn't describe it correctly.
	//* When the font is 11pt (or 11px as I assumed it should be), padding-up is 6px, padding-down is 7px,
	//* the height of this label in total cannot be 21px.
	//* Here, I used height: 21px as the base and ignored the padding. Hence, other details were changed correspondingly.
	.error-label{
		font-size: 11px; //11pt;
		font-weight: normal;
		color: #fff;
		padding: 0 5px;//6px 5px 7px 5px; //This padding described in styleguide cannot be possible.
		margin-left: 5px;//8px;
		margin-top: 0; //-5px;
		display: inline-block;
		left: 100%;
		white-space: nowrap;
		height: 21px; // Height: 21px and padding: 6px 5px 7px 5px are conflicting.
		line-height: 21px; //in order to make the padding right
		background: linear-gradient(#EE6767,#E64141);
		position: absolute;
		-moz-border-radius:    3px;
		-webkit-border-radius: 3px;
		border-radius:         3px;

	&:before {
		content:"";
		position: absolute;
		right: 100%;
		top: 7px; //11px;
		width: 0;
		height: 0;
		border-top: 3px solid transparent;
		border-right: 3px solid #ee5457;
		border-bottom: 3px solid transparent;
		}
	}
}

// Reposition feedback icon if label is hidden with "screenreader only" state
.has-feedback label.sr-only ~ .form-control-feedback {
	top: 0;
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
	display: block; // account for any element using help-block
	margin-top: 5px;
	margin-bottom: 10px;
	color: #666;
}



// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {

	// Kick in the inline
	@media (min-width: @screen-sm-min) {
		// Inline-block all the things for "inline"
		.form-group {
			display: inline-block;
			margin-bottom: 0;
			vertical-align: middle;
			line-height: 1;//to make sure the icon and input box are both of 21px height
		}

		// In navbar-form, allow folks to *not* use `.form-group`
		.form-control {
			display: inline-block;
			width: auto; // Prevent labels from stacking above inputs in `.form-group`
			vertical-align: middle;
		}

		.input-group {
			display: inline-table;
			vertical-align: middle;

			.input-group-addon,
			.input-group-btn,
			.form-control {
				width: auto;
			}
		}

		// Input groups need that 100% width though
		.input-group > .form-control {
			width: 100%;
		}

		.control-label {
			margin-bottom: 0;
			vertical-align: middle;
		}

		// Remove default margin on radios/checkboxes that were used for stacking, and
		// then undo the floating of radios and checkboxes to match (which also avoids
		// a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
		.radio,
		.checkbox {
			display: inline-block;
			margin-top: 0;
			margin-bottom: 0;
			vertical-align: middle;

			label {
				padding-left: 0;
			}
		}
		.radio input[type="radio"],
		.checkbox input[type="checkbox"] {
			position: relative;
			margin-left: 0;
		}

		// Validation states
		//
		// Reposition the icon because it's now within a grid column and columns have
		// `position: relative;` on them. Also accounts for the grid gutter padding.
		.has-feedback .form-control-feedback {
			top: 0;
		}
	}
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

	// Consistent vertical alignment of radios and checkboxes
	//
	// Labels also get some reset styles, but that is scoped to a media query below.
	.radio,
	.checkbox,
	.radio-inline,
	.checkbox-inline {
		margin-top: 0;
		margin-bottom: 0;
		padding-top: (@padding-base-vertical + 1); // Default padding plus a border
	}
	// Account for padding we're adding to ensure the alignment and of help text
	// and other content below items
	.radio,
	.checkbox {
		min-height: (@line-height-computed + (@padding-base-vertical + 1));
	}

	// Make form groups behave like rows
	.form-group {
		.make-row();
	}

	// Reset spacing and right align labels, but scope to media queries so that
	// labels on narrow viewports stack the same as a default form example.
	@media (min-width: @screen-sm-min) {
		.control-label {
			text-align: right;
			margin-bottom: 0;
			padding-top: (@padding-base-vertical - 1); // Default padding plus a border
		}
	}

	// Validation states
	//
	// Reposition the icon because it's now within a grid column and columns have
	// `position: relative;` on them. Also accounts for the grid gutter padding.
	.has-feedback .form-control-feedback {
		top: 0;
		right: (@grid-gutter-width / 2);
	}

	// Form group sizes
	//
	// Quick utility class for applying `.input-lg` and `.input-sm` styles to the
	// inputs and labels within a `.form-group`.
	.form-group-lg {
		@media (min-width: @screen-sm-min) {
			.control-label {
				padding-top: ((@padding-large-vertical * @line-height-large) + 25);
			}
		}
		.form-control {
			&:extend(.input-lg);
		}
	}
	.form-group-sm {
		@media (min-width: @screen-sm-min) {
			.control-label {
				padding-top: (@padding-small-vertical - 1);
			}
		}
		.form-control {
			&:extend(.input-sm);
		}
	}
	.form-group-md {
		@media (min-width: @screen-sm-min) {
			.control-label {
				padding-top: (@padding-medium-vertical + 1);
			}
		}
		.form-control {
			&:extend(.input-md);
		}
	}
}


.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {
	position: relative;
	min-height: 1px;
	padding-right: 10px;
	padding-left: 10px;
}